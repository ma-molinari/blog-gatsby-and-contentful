{"version":3,"sources":["webpack:///./src/components/Categories/Post.js","webpack:///./src/components/Categories/ContentTitle.js","webpack:///./src/templates/categories.js"],"names":["Post","props","react_default","a","createElement","BoxImagePost","es","to","slug","ImagePost","srcSet","image","TitlePost","title","style","textDecoration","TextPost","text","styled","div","withConfig","displayName","componentId","img","p","ContentTitle","ContainerTitlePage","TitlePage","color","colorTitleCategory","titleCategory","h1","__webpack_require__","d","__webpack_exports__","query","Category","_ref","data","_useState","useState","isFetching","setIsFetching","_useState2","perPage","setPerPage","posts","allContentfulPost","edges","slice","handleScroll","list","document","querySelector","scrollTop","clientHeight","window","scrollY","useEffect","addEventListener","removeEventListener","setTimeout","postsPerPage","length","layout","Container","seo","node","category","Categories_ContentTitle","NotFoundMessage","ContainerPosts","id","map","item","index","Categories_Post","key","imagePost","fluid","content","json","value","substring","LoadingArticles","h2"],"mappings":"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","file":"component---src-templates-categories-js-c2671dbbb37698b5a2ff.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"@reach/router\"\n\nconst Post = props => {\n  return (\n    <div>\n      <BoxImagePost>\n        <Link to={`p/${props.slug}`}>\n          <ImagePost srcSet={props.image} />\n        </Link>\n      </BoxImagePost>\n      <TitlePost>\n        <Link to={`p/${props.slug}`}>{props.title}</Link>\n      </TitlePost>\n      <Link style={{ textDecoration: \"none\" }} to={`p/${props.slug}`}>\n        <TextPost>{props.text}</TextPost>\n      </Link>\n    </div>\n  )\n}\n\nexport default Post\n\nconst BoxImagePost = styled.div`\n  display: block;\n  position: relative;\n  z-index: 1;\n  margin-bottom: 20px;\n  text-align: center;\n  a {\n    display: block;\n    position: relative;\n    z-index: 1;\n    overflow: hidden;\n  }\n`\n\nconst ImagePost = styled.img`\n  min-height: 210px;\n  max-height: 210px;\n  border-radius: 0.2em;\n  width: 100%;\n  opacity: 1;\n  transition: all 0.3s ease;\n  backface-visibility: hidden;\n  margin-bottom: -7px;\n  :hover {\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n`\nconst TitlePost = styled.p`\n  font-size: 22px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.45;\n  letter-spacing: normal;\n  color: #242d3c;\n  a {\n    text-decoration: none;\n    color: #242d3c;\n    padding: 1em 0;\n  }\n  @media (max-width: 1200px) {\n    max-width: 20em;\n  }\n`\n\nconst TextPost = styled.p`\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.56;\n  letter-spacing: normal;\n  color: #999;\n  @media (max-width: 1200px) {\n    max-width: 25em;\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst ContentTitle = props => {\n  return (\n    <ContainerTitlePage>\n      <TitlePage style={{ color: props.colorTitleCategory }}>\n        {props.titleCategory}\n      </TitlePage>\n    </ContainerTitlePage>\n  )\n}\n\nexport default ContentTitle\n\nconst ContainerTitlePage = styled.div`\n`\n\nconst TitlePage = styled.h1`\n  margin: 0;\n  font-size: 38px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.45;\n  letter-spacing: normal;\n  color: #666;\n`\n\n","import React, { useState, useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Post from \"../components/Categories/Post\"\nimport ContentTitlePage from \"../components/Categories/ContentTitle\"\nimport {\n  formatCategoryText,\n} from \"../utils/helpers\"\n\nconst Category = ({ data }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [perPage, setPerPage] = useState(12)\n\n  const posts = data.allContentfulPost.edges\n  const title = posts.slice(0, 1)[0] || \"Categorias\"\n  // const icon = title.node.category.map(item => item.photo.file.url)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  }, [])\n\n  useEffect(() => {\n    if (!isFetching) return\n    fetchMoreListItems()\n  }, [isFetching])\n\n  function handleScroll() {\n    const list = document.querySelector(\"#containerList\")\n    let componentSizeMinusVerticalScroll =\n      list.scrollTop + list.clientHeight - window.scrollY\n    if (componentSizeMinusVerticalScroll <= 500) {\n      setIsFetching(true)\n    }\n  }\n\n  const postsPerPage = posts.slice(0, perPage)\n\n  function fetchMoreListItems() {\n    setTimeout(() => {\n      if (postsPerPage.length < posts.length) {\n        setPerPage(perPage + 12)\n        setIsFetching(false)\n      } else {\n        setIsFetching(false)\n      }\n    }, 500)\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <SEO\n          // image={icon}\n          title={\n            title.node.category.category\n          }\n        />\n        <ContentTitlePage\n          // categoryIcon={icon}\n          titleCategory={title.node.category.category}\n        />\n        {postsPerPage.length === 0 ? (\n          <NotFoundMessage>\n            Não há nenhum conteúdo para essa categoria !\n          </NotFoundMessage>\n        ) : (\n          <ContainerPosts id=\"containerList\">\n            {postsPerPage.map((item, index) => {\n              return (\n                <Post\n                  slug={item.node.slug}\n                  key={index}\n                  image={\n                    !item.node.imagePost ? \"\" : item.node.imagePost.fluid.srcSet\n                  }\n                  title={item.node.title}\n                  id={item.node.id}\n                  text={item.node.content.json.content[0].content[0].value.length > 110 ?`${item.node.content.json.content[0].content[0].value.substring(\n                    0,\n                    110\n                  )}...` : item.node.content.json.content[0].content[0].value}\n                />\n              )\n            })}\n          </ContainerPosts>\n        )}\n        {isFetching && postsPerPage.length < posts.length ? (\n          <LoadingArticles>Carregando mais artigos...</LoadingArticles>\n        ) : (\n          \"\"\n        )}\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Category\n\nconst Container = styled.div`\n  padding: 2em;\n  margin: 0 auto;\n  max-width: 1300px;\n  min-height:100vh;\n`\n\nconst SubTitlePage = styled.p`\n  margin-top: 1em;\n  max-width: 500px;\n  width: 100%;\n  font-size: 18px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.61;\n  letter-spacing: normal;\n  color: #585f6b;\n`\n//posts\nconst ContainerPosts = styled.div`\n  margin-top: 2.5em;\n  display: grid;\n  grid-gap: 2.5em;\n  grid-template-columns: 1fr 1fr 1fr;\n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (max-width: 700px) {\n    grid-template-columns: 1fr;\n  }\n  @media (max-width: 320px) {\n    margin-top: 4.5em;\n  }\n`\n\nconst NotFoundMessage = styled.h1`\n  margin-top: 3em;\n  font-size: 2em;\n  text-align: center;\n`\n\nconst LoadingArticles = styled.h2`\n  color: #fc5171;\n  margin-top: 1em;\n  text-align: center;\n`\n\nexport const query = graphql`\n  query Categories($categoria: String!) {\n    allContentfulPost(\n      filter: { category: { category: { eq: $categoria } } }\n      sort: { fields: [createdAt], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          slug\n          category {\n            category\n            photo {\n              file {\n                url\n              }\n            }\n          }\n          content {\n            json\n          }\n          imagePost {\n            fluid {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}