{"version":3,"sources":["webpack:///./src/components/Categories/Post.js","webpack:///./src/components/Categories/ContentTitle.js","webpack:///./src/templates/categories.js"],"names":["Post","props","BoxImagePost","to","slug","ImagePost","srcSet","image","TitlePost","title","style","textDecoration","TextPost","text","styled","div","img","p","ContentTitle","ContainerTitlePage","TitlePage","color","colorTitleCategory","titleCategory","h1","Category","data","useState","isFetching","setIsFetching","perPage","setPerPage","posts","allContentfulPost","edges","slice","handleScroll","list","document","querySelector","scrollTop","clientHeight","window","scrollY","useEffect","addEventListener","removeEventListener","setTimeout","postsPerPage","length","Container","node","category","NotFoundMessage","ContainerPosts","id","map","item","index","key","imagePost","fluid","content","json","value","substring","LoadingArticles","h2","query"],"mappings":"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","file":"component---src-templates-categories-js-5a47fd61d50a90179f26.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\nimport { Link } from \"@reach/router\"\n\nconst Post = props => {\n  return (\n    <div>\n      <BoxImagePost>\n        <Link to={`p/${props.slug}`}>\n          <ImagePost srcSet={props.image} />\n        </Link>\n      </BoxImagePost>\n      <TitlePost>\n        <Link to={`p/${props.slug}`}>{props.title}</Link>\n      </TitlePost>\n      <Link style={{ textDecoration: \"none\" }} to={`p/${props.slug}`}>\n        <TextPost>{props.text}</TextPost>\n      </Link>\n    </div>\n  )\n}\n\nexport default Post\n\nconst BoxImagePost = styled.div`\n  display: block;\n  position: relative;\n  z-index: 1;\n  margin-bottom: 20px;\n  text-align: center;\n  a {\n    display: block;\n    position: relative;\n    z-index: 1;\n    overflow: hidden;\n  }\n`\n\nconst ImagePost = styled.img`\n  min-height: 210px;\n  max-height: 210px;\n  border-radius: 0.2em;\n  width: 100%;\n  opacity: 1;\n  transition: all 0.3s ease;\n  backface-visibility: hidden;\n  margin-bottom: -7px;\n  :hover {\n    transform: scale3d(1.05, 1.05, 1.05);\n  }\n`\nconst TitlePost = styled.p`\n  font-size: 22px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.45;\n  letter-spacing: normal;\n  color: #242d3c;\n  a {\n    text-decoration: none;\n    color: #242d3c;\n    padding: 1em 0;\n  }\n  @media (max-width: 1200px) {\n    max-width: 20em;\n  }\n`\n\nconst TextPost = styled.p`\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.56;\n  letter-spacing: normal;\n  color: #999;\n  @media (max-width: 1200px) {\n    max-width: 25em;\n  }\n`\n","import React from \"react\"\nimport styled from \"styled-components\"\n\nconst ContentTitle = props => {\n  return (\n    <ContainerTitlePage>\n      <TitlePage style={{ color: props.colorTitleCategory }}>\n        {props.titleCategory}\n      </TitlePage>\n    </ContainerTitlePage>\n  )\n}\n\nexport default ContentTitle\n\nconst ContainerTitlePage = styled.div`\n`\n\nconst TitlePage = styled.h1`\n  margin: 0;\n  font-size: 38px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.45;\n  letter-spacing: normal;\n  color: #666;\n`\n\n","import React, { useState, useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Post from \"../components/Categories/Post\"\nimport ContentTitlePage from \"../components/Categories/ContentTitle\"\nimport {\n  formatCategoryText,\n} from \"../utils/helpers\"\n\nconst Category = ({ data }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [perPage, setPerPage] = useState(12)\n\n  const posts = data.allContentfulPost.edges\n  const title = posts.slice(0, 1)[0] || \"Categorias\"\n  // const icon = title.node.category.map(item => item.photo.file.url)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll)\n    return () => window.removeEventListener(\"scroll\", handleScroll)\n  }, [])\n\n  useEffect(() => {\n    if (!isFetching) return\n    fetchMoreListItems()\n  }, [isFetching])\n\n  function handleScroll() {\n    const list = document.querySelector(\"#containerList\")\n    let componentSizeMinusVerticalScroll =\n      list.scrollTop + list.clientHeight - window.scrollY\n    if (componentSizeMinusVerticalScroll <= 500) {\n      setIsFetching(true)\n    }\n  }\n\n  const postsPerPage = posts.slice(0, perPage)\n\n  function fetchMoreListItems() {\n    setTimeout(() => {\n      if (postsPerPage.length < posts.length) {\n        setPerPage(perPage + 12)\n        setIsFetching(false)\n      } else {\n        setIsFetching(false)\n      }\n    }, 500)\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <SEO\n          // image={icon}\n          title={\n            title.node.category.category\n          }\n        />\n        <ContentTitlePage\n          // categoryIcon={icon}\n          titleCategory={title.node.category.category}\n        />\n        {postsPerPage.length === 0 ? (\n          <NotFoundMessage>\n            Não há nenhum conteúdo para essa categoria !\n          </NotFoundMessage>\n        ) : (\n          <ContainerPosts id=\"containerList\">\n            {postsPerPage.map((item, index) => {\n              return (\n                <Post\n                  slug={item.node.slug}\n                  key={index}\n                  image={\n                    !item.node.imagePost ? \"\" : item.node.imagePost.fluid.srcSet\n                  }\n                  title={item.node.title}\n                  id={item.node.id}\n                  text={item.node.content.json.content[0].content[0].value.length > 110 ?`${item.node.content.json.content[0].content[0].value.substring(\n                    0,\n                    110\n                  )}...` : item.node.content.json.content[0].content[0].value}\n                />\n              )\n            })}\n          </ContainerPosts>\n        )}\n        {isFetching && postsPerPage.length < posts.length ? (\n          <LoadingArticles>Carregando mais artigos...</LoadingArticles>\n        ) : (\n          \"\"\n        )}\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Category\n\nconst Container = styled.div`\n  padding: 2em;\n  margin: 0 auto;\n  max-width: 1300px;\n  min-height:100vh;\n`\n\nconst SubTitlePage = styled.p`\n  margin-top: 1em;\n  max-width: 500px;\n  width: 100%;\n  font-size: 18px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  line-height: 1.61;\n  letter-spacing: normal;\n  color: #585f6b;\n`\n//posts\nconst ContainerPosts = styled.div`\n  margin-top: 2.5em;\n  display: grid;\n  grid-gap: 2.5em;\n  grid-template-columns: 1fr 1fr 1fr;\n  @media (max-width: 1200px) {\n    grid-template-columns: 1fr 1fr;\n  }\n  @media (max-width: 700px) {\n    grid-template-columns: 1fr;\n  }\n  @media (max-width: 320px) {\n    margin-top: 4.5em;\n  }\n`\n\nconst NotFoundMessage = styled.h1`\n  margin-top: 3em;\n  font-size: 2em;\n  text-align: center;\n`\n\nconst LoadingArticles = styled.h2`\n  color: #fc5171;\n  margin-top: 1em;\n  text-align: center;\n`\n\nexport const query = graphql`\n  query Categories($categoria: String!) {\n    allContentfulPost(\n      filter: { category: { category: { eq: $categoria } } }\n      sort: { fields: [createdAt], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          title\n          slug\n          category {\n            category\n            photo {\n              file {\n                url\n              }\n            }\n          }\n          content {\n            json\n          }\n          imagePost {\n            fluid {\n              src\n              srcSet\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}